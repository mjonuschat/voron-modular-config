################################################################################
# Heatsoaking and chamber temperature
################################################################################
[gcode_macro HEATSOAK]
gcode:
    # Parameters
    {% set Tbed = params.T|default(printer["gcode_macro _USER_VARIABLES"].heatsoak_default_temperature)|int %}
    {% set Tnozzle = printer["gcode_macro _USER_VARIABLES"].heatsoak_nozzle_temperature %}
    {% set move = params.MOVE|default(1)|int %}

    {% set HAS_EXHAUST_FAN = printer["gcode_macro _USER_VARIABLES"].exhaust_filter_enabled|default(False) %}

    SAVE_GCODE_STATE NAME=HEATSOAK

    # Cancel active exhaust timer and turn off exhaust
    {% if HAS_EXHAUST_FAN %}
    UPDATE_DELAYED_GCODE ID=_DELAYED_EXHAUST_OFF DURATION=0
    _EXHAUST_OFF
    {% endif %}

    # Cancel off timer (if it's active)
    UPDATE_DELAYED_GCODE ID=DELAYED_OFF DURATION=0

    # Heat bed
    M140 S{Tbed}

    # If requested bed temperauter > 100Â°C enable hotend as well
    {% if Tbed >= 100 %}
        # No-ooze temperature
        M104 S{Tnozzle}
        # 80% Part cooling fan
        M106 S205
    {% else %}
        # Turn off hotend and part cooling
        M104 S0
        M106 S0
    {% endif %}

    {% if move == 1 %}
        PARK_CENTER
    {% endif %}

    RESTORE_GCODE_STATE NAME=HEATSOAK

[gcode_macro _WAIT_FOR_BED_TEMP]
description: Wait for bed to reach temperature
gcode:
    {% set BED_TEMP = params.BED|default(0)|int %}

    _STATUS_LEDS STATUS="heating"

    # Start the heatsoak process
    HEATSOAK T={BED_TEMP} MOVE=1

    # Wait for bed to reach temperature
    M190 S{BED_TEMP}

[gcode_macro _WAIT_FOR_CHAMBER_TEMP]
description: Heat up bed and wait for chamber to reach target temperature
gcode:
    {% set BED_TEMP = params.BED|default(0)|int %}
    {% set HAS_CHAMBER_TEMP_SENSOR = printer["gcode_macro _USER_VARIABLES"].sensor_chamber_temperature_enabled|default(False) %}

    {% if HAS_CHAMBER_TEMP_SENSOR %}
        {% set CHAMBER_SENSOR = printer["gcode_macro _USER_VARIABLES"].sensor_chamber_temperature_name|string %}
        {% set CHAMBER_TEMP = params.CHAMBER|default(0)|int %}
        {% set ACTUAL_CHAMBER_TEMP = printer["temperature_sensor " + CHAMBER_SENSOR].temperature %}
        {% set ACTUAL_BED_TEMP =  printer.heater_bed.temperature %}

        {% if ACTUAL_CHAMBER_TEMP < CHAMBER_TEMP %}
            _WAIT_FOR_BED_TEMP BED={BED_TEMP}

            # Wait for chamber to reach temperature
            TEMPERATURE_WAIT SENSOR="temperature_sensor {CHAMBER_SENSOR}" MINIMUM={CHAMBER_TEMP}
        {% else %}
            # Bed is not yet fully heated
            {% if ACTUAL_BED_TEMP < (BED_TEMP - 2) %}
               _WAIT_FOR_BED_TEMP BED={BED_TEMP}
            {% endif %}
        {% endif %}
    {% else %}
        _WAIT_FOR_BED_TEMP BED={BED_TEMP}
    {% endif %}
